workflows:
  ios-build:
    name: iOS Build Ad-Hoc
    instance_type: mac_mini_m2

    environment:
      flutter: stable
      xcode: latest
      cocoapods: default

      vars:
        CERT_PASSWORD: I74sbHRX
        P12_BASE64: "MIIMEwIBAzCCC9kGCSqGSIb3DQEHAaCCC8oEggvGMIILwjCCBngGCSqGSIb3DQEHBqCCBmkwggZlAgEAMIIGXgYJKoZIhvcNAQcBMB0GCiqGSIb3DQEMAQMwDwQIYMuCQb9ThLsCAwDDUICCBjD2sQdUWZlhvYRxjVpiwM/x/zY8Q7EHFbGGRhDwtCQSTYNbTHOshWIVxLGYLFGa3JCczYJ5uOZsIdo96lQTEau6DbtqUSMHasSbUG3j+zcEpzjYQ/oyOwTEQSONher11mUg3RgGu69DPIenoFKDvVESzOqKR5caQX5cmxxFqF8AL0OgfurmEwN/b/HLf0srojXybw+ZswYCzpsNE0vtCG05NZfFvG9vdDHUaUhqt/247QQx9K5/u278dtKEqvfHLx8HIknESMpkcve4kJICUbbrGgM27CZBA3/gx7rRgqGRtejvJWMHiy/3ctIZFtRZHaIvjm1MQr+gzlVeMLuQSebXPzWum3HJf3yg65kcJ4RC6OBuksFIQ3w3WVXI6tn47a6dmrHSAuFYltbYSlXjG3xcphMwSIXjV8cFD3zN1zVeBSYcSketUQxl1yyHqFlEuP4O0TpCUZk4lBZdv0aVQB3I6PVebILSdrWqrH8voHHuOVb9z7kY024J6EEWW5yeGtaliOIHanpQmxB7wwvbYXGp4Em2m9MgEH0eH+WOaIAoFEYK5gd0o32RSqcKvR5NDqb533H06bs9hdggneKuuLFoeONs2+oRaJMc291YChzrb8jJG7DCAfsGzZFQ16kXPizwdbdA+QhX/YEYiApCgZfH2zbp883vwTFQjuAS29xKufQIE+LnkH2msrond3zHhKQu29gDT0jtx/HrmReiNtPzcImp/pYJSht0bYEePoVeXSpg1jXde+IZMPVDs/n+/GAkE3BwuTztXkMQUaOSXty9nuLUIrpD4R+8IEgkXesMUsab93Htgyl250xB02O84e663hG2FhlSg5QZvQm+uK1zfOMt5eLVZixFTy8xjRviqj7H+NQqnZjmnyLet84ESSycsHp9bw3AbfNulbZc4YSvU1WhTreFgaHI7QvVWr5CjTMxS60VjEu9E5W8nkH+/wO1I+nxjK1IdzGmcIyws6H6KdHrRm225H7O/sXhmgGw6hzUyUKxbqKd1iOJrlg/NL00HdxmeITkR0y/DrU1j65pIyMjo4i2PfCx6hrSDiMYXjAf/mOrKcfVSx6H3CJTgo0Kt9UIqeIj5eBWzGfv41Q4P7uby8xeLiZnzDwYfc47E1GR6BnygnwT7KoyvZU4vwWIQaPu/QF8fPYoQ82hyLIcQxtPBRHwcYMR4WB9uxbgPA69zB4Q31iBW/khPPi7zS+u+IU+HHnBZlIqvIrTgjwtBnrTFUvgJnDs4/Q8UbQ21rsX+NYG3fErsgf2bfmgf4w6QSf1I7ank2JvILg5X6V2ZATXDSr8r4TwAtEk9zTsYkwt+jDmWnaxx2SQ4s7LsWS0cO5uBdVDL4CraoYycA5QhagVl1lBxCdEzoOq8mTQ/anGQfr0e2gBHnEatJX/yrneTtSdq4+3enn0tHY4c5guw73qEC7NbfZLFGG+PT6iHkAqBrRGUnHrtKVcj0TrBER6NxHXsxmKsLryjLsKMA2teLLuYcbwhRhO1HBx3Bjs4QjGww4dKfDmbeqFvSw3Gg20DQhiq1olV4sl7sVJQlMPU5bzWrl3q6MKDdQdrvB1A70SLJhS4nkjYbImXfPejBNN4rOxnbEvZqTXF4TbNJsSgtA4hE8vGVDP2em4oHAVIYYvdDxxbge0fd2GcpgSxbxy8JROjQzL9WJ94eu2/6P4wq/ejwdp3uGOLYsxjk4VH3La2g3qhIdO7c6ky8G3t+xi+5N/0NX9Z3FdklXIYRD0MkG/YzgF+4OFI5H/AunWeCc6IuRrMF6JH1rofaWbmq34a92OI3IiM0BtvpWqyzsoXQG8UTi5tx3Nuap/qtKgk+UjRbHdu5KjTjLqRzHU1p1uSI6Vyqf58lKEsa/6chorD0+UsQqcHlUjDoH0fVTj9BHCD7z9JkIbR5n5wms33+FH8E0uVd8ZlLl/KIh/Pp3nESOOMquthpriURm0qTP5hL5msIF2IHG7Ux3EATzEMuR1t63sR5YZ2FStCvqInaLLEit4vSD0+rz3BiRixc/AzYjrlnbe+l29KeEyPFO5gdenJWhdLPTfBeDH9dXmRfnGWSJhOglxbndB6rSJV6UZx7YGORJ+yZir2n63xf1oAegwggVCBgkqhkiG9w0BBwGgggUzBIIFLzCCBSswggUnBgsqhkiG9w0BDAoBAqCCBO8wggTrMB0GCiqGSIb3DQEMAQMwDwQIuxQ4Y6pH6u4CAwDDUASCBMhTJlEsSGetizJeVoDNpS/wCIKih9Jt196Zt4IiaWtEH0DXqINjc52rYsdX5qtEmRoam5KBaEYXU0nj81GboflaUdFjwCoYYhwBV1aHTPAaD+VW+sat4BQNZ6/6RX3sZw8WDwRyCtTsevZHUsWn3EENyxYDr3KGee0eZfeQBNZ7cIdr6N+FsPdRvJzQNDFoYwuYxolhmc6KIm8tKjxGYrWUbmkzlWtUzHw4vi0kwmu+NN3VGJNV8sMomQNyGfv0bkk+KUSoCEvsC/wEZIWhJg8QlF0DTBdsRIf518DXwYYFB1yhRbGH3zn6dAWChs7YeR4Fxvdtxxp8MORZse4O9+oHjdXCAU8BclHWcy4Ai8sRh57Ov/DRIcT9PlDcNyV0c2s1KuWHiJrD0FSZSKP9QqNCzqrTZ+wAQ545pP2BZYPXC/hlhbLPCRIOrKBits21SEkhYy7soiMGq7RqaD1QSKMhujXx9pBLnrN2DdOJzhSpxOsIiQhd0ZlvbiJkwfvgdnXgoGuNiPvDqbo5x1Hxy9Hjxxb5P4bN8yPJtqyuHka3fIj902JgncHLvNsAeG3Zibm8ZZzWRD3BpPv1NbuGxCXU3jLvPtvojxPHOPGgMrcfrAjBlbDnqY67iAl8W8fO0nwL4uAbATydcxILB+gCe4P0FkMitTeDEWA2vfCtRWGb91VibkRodf7H1wUCOJNSu3bSN1n7hb9Fn9gjvbxvLhnKsikLfFmLY1ithNV9TqOjoHjP/qQs4SGbCuJcGJ1H8rQXxPDjPjTTldqwztY56+4UKLzg4jimbqrjHfsBkuF6mb2ILNPKR9ybeP1Bc1oe4gelVGlEWPuuWjGI1FuwctjcKVFm+n9F/mivHmQzJl0kiYJubXAfDz/+xmvAnY5beITqHnZVIbeeiUZbKWCFNudi0QTEpchU1vxviCR85vV9M497uAiWSwwayMDJwl30pxrg59uf2gB2DiBJuIPbGmCTj0yRlAsAtyjqYtBQFqjkAs+kYFZHEMtetvDAqW6WjM7selBKXmvYiQC/RSeyE72fKldZpnqEr/KPGQsjxZ4SIYqT+jjvoulEqKAsPOHuluvhf4hdyNNrDUv6KcRByburVSJEZu5POPSFfnpYu+yr3mMimHnxT/TAgsjA9FvmEcKa27jID1BmpMVnXNQ6bN/TOJruEuPkCJgtJJINMnUBBPt+bAQoYs+eoTIVRq6Wy7/3oUYAbSgSJ1NxiFk15qI99i2VTfy56Sqt70XxFaoPxijT1anyV91fYeCqYwxI3Kt7J3ovhv01L1GfK2EBdhD9BzydgQEjOtq6AKmMbObZAA3FHIky6pSVbsVyFx6E6usvAgOLF1C/sxfbOYxIEWdIGyylPmTsDYcw3Hr6OvX7Fv5EG9w6Pow2R8ys2IjBhqp0hO3d9Ai8t76ptYeMOjjL93TJrEUAUw3gGRq6Mbc3AGuT+vI2ekBkIdXSAJrbd1JQTVIP+NoplT4nYHMh0UE/lPkrKSfVcO05prgsojuDd8TuPNI8HEKSO00WS9+ol5yCiQmv04DcB6xkFTX3qz2QWa31cnO558ZrGYtMbTe0XV+NYcK31iVqNVA2SOT31rO+tfkbY7xqq4RtpIFTHyIDoqpP6CMUiUMxJTAjBgkqhkiG9w0BCRUxFgQUZDwlyh1ScsVgH+BH+oIZkG69S+MwMTAhMAkGBSsOAwIaBQAEFI50tQpLJ68UrBHz0YrMuD/mIoynBAi7EmmsSdwYuQICCAA=
"
        PROVISIONING_PROFILE_BASE64: "MIIwcQYJKoZIhvcNAQcCoIIwYjCCMF4CAQExCzAJBgUrDgMCGgUAMIIgfgYJKoZIhvcNAQcBoIIgbwSCIGs8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZS8vRFREIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5TGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5BcHBJRE5hbWU8L2tleT4KCTxzdHJpbmc+QWJhcmVpVGVjbm9sb2dpYTwvc3RyaW5nPgoJPGtleT5BcHBsaWNhdGlvbklkZW50aWZpZXJQcmVmaXg8L2tleT4KCTxhcnJheT4KCTxzdHJpbmc+VjQyRjlYVjZGVjwvc3RyaW5nPgoJPC9hcnJheT4KCTxrZXk+Q3JlYXRpb25EYXRlPC9rZXk+Cgk8ZGF0ZT4yMDI1LTA4LTAyVDAyOjM4OjMzWjwvZGF0ZT4KCTxrZXk+UGxhdGZvcm08L2tleT4KCTxhcnJheT4KCQk8c3RyaW5nPmlPUzwvc3RyaW5nPgoJCTxzdHJpbmc+eHJPUzwvc3RyaW5nPgoJCTxzdHJpbmc+dmlzaW9uT1M8L3N0cmluZz4KCTwvYXJyYXk+Cgk8a2V5PklzWGNvZGVNYW5hZ2VkPC9rZXk+Cgk8ZmFsc2UvPgoJPGtleT5EZXZlbG9wZXJDZXJ0aWZpY2F0ZXM8L2tleT4KCTxhcnJheT4KCQk8ZGF0YT5NSUlGMFRDQ0JMbWdBd0lCQWdJUWFyb1F4aTdhcVhVanRwbWVkbHFtdGpBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSTFNRGd3TWpBeU1qTXpNMW9YRFRJMk1EZ3dNakF5TWpNek1sb3dnWmN4R2pBWUJnb0praWFKay9Jc1pBRUJEQXBXTkRKR09WaFdOa1pXTVRzd09RWURWUVFERERKQmNIQnNaU0JFYVhOMGNtbGlkWFJwYjI0NklFRk1Ra1ZTVkU4Z1MweEpSMFZTVFVGT0lDaFdOREpHT1ZoV05rWldLVEVUTUJFR0ExVUVDd3dLVmpReVJqbFlWalpHVmpFYU1CZ0dBMVVFQ2d3UlFVeENSVkpVVHlCTFRFbEhSVkpOUVU0eEN6QUpCZ05WQkFZVEFsVlRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQWthUDVmODgvMDBVbE41ZFg1RGZ4SWk5T2gzOFd2a2VnOG5lUXk5SFlxeUxoMGhlZlVKanhvZHU1VXdKZitLYlhIM3JmRlBHQTZJQzBHQU1pcWtyR0t4WWtMUDlMN1hNVEhKZ0VxcDU1YmcvQmpzN3RpTGk4RmUva05QbFZMOGpyNVpKaW9TZnI0NUxUTGExclpoZkVpNXRVekF5cFJCRlFUbTJoSWViZkdnR0t2Q2hsTnVyRExkU2NrQzQwS3ZqMm9tMFdDaTZIZmUvbElQN21JK1VYajdrWTlXTVh5YWpkM3ltRDhsYmZ3RHBzUTg0UlhNUWlwZGtnRnRIRjhpaUNkY0dneDZaVHBvZk0zM2RoZDlOeVFlNVVUemR0YWdNODFCMmljazZ5S1pNWGU1OFFLaHRCRDY3cXBMeHp5V2psZEw5b0VTM25tTG1NRE5RU3R1VzJtUUlEQVFBQm80SUNPRENDQWpRd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRSi9zQVZrUG12WkFxU0Vya21LR01NbCt5bnNqQndCZ2dyQmdFRkJRY0JBUVJrTUdJd0xRWUlLd1lCQlFVSE1BS0dJV2gwZEhBNkx5OWpaWEowY3k1aGNIQnNaUzVqYjIwdmQzZGtjbWN6TG1SbGNqQXhCZ2dyQmdFRkJRY3dBWVlsYUhSMGNEb3ZMMjlqYzNBdVlYQndiR1V1WTI5dEwyOWpjM0F3TXkxM2QyUnlaek13TlRDQ0FSNEdBMVVkSUFTQ0FSVXdnZ0VSTUlJQkRRWUpLb1pJaHZkalpBVUJNSUgvTUlIREJnZ3JCZ0VGQlFjQ0FqQ0J0Z3lCczFKbGJHbGhibU5sSUc5dUlIUm9hWE1nWTJWeWRHbG1hV05oZEdVZ1lua2dZVzU1SUhCaGNuUjVJR0Z6YzNWdFpYTWdZV05qWlhCMFlXNWpaU0J2WmlCMGFHVWdkR2hsYmlCaGNIQnNhV05oWW14bElITjBZVzVrWVhKa0lIUmxjbTF6SUdGdVpDQmpiMjVrYVhScGIyNXpJRzltSUhWelpTd2dZMlZ5ZEdsbWFXTmhkR1VnY0c5c2FXTjVJR0Z1WkNCalpYSjBhV1pwWTJGMGFXOXVJSEJ5WVdOMGFXTmxJSE4wWVhSbGJXVnVkSE11TURjR0NDc0dBUVVGQndJQkZpdG9kSFJ3Y3pvdkwzZDNkeTVoY0hCc1pTNWpiMjB2WTJWeWRHbG1hV05oZEdWaGRYUm9iM0pwZEhrdk1CWUdBMVVkSlFFQi93UU1NQW9HQ0NzR0FRVUZCd01ETUIwR0ExVWREZ1FXQkJRTFNKR09XZUJzNzZkdUlGa0FsZmZHNUY4VHRqQU9CZ05WSFE4QkFmOEVCQU1DQjRBd0V3WUtLb1pJaHZkalpBWUJCd0VCL3dRQ0JRQXdFd1lLS29aSWh2ZGpaQVlCQkFFQi93UUNCUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJhNmczVUMxbUl0cXdzVUdDWElPL3pvYm1FWjk0TUFOYjlMaTdWUVNBSzJGYlArUlZQWitDWmxGLyswdE1PNlc4WXVxWE1TZjBrM3hoSFRNTU1QUFFEd3QzVU9rdS92K0VlMjI4a3dkU0RqbVhENzJHc2R3V3g5aGJxcnIvWmJkWTloZlhhU09ReDJxSkF1NVg5MEJWWDdBZTZmcXEwQ0hPZEdCS2tuc1ZaWCtPVy9kRFI5UFBNSENtaS9zRzAyYzB4ZGRlWmhNWVdXUld6MkwzV0ROZ3N3clVGQmZTTGlsTG03aUM3ajNFZ1FyUmZhc1Azd1NwTG5aeHhMV2xTVVpqVVIyc2x5dUhrQ1pXSEtvdFlxTHI5d1Y3Mno0YjdEcjYxbThJQi9xY29EVm45T2cvb3NpbVljakpYVWZSN1hoWUZOUUZLVzBkcVZ5eklyck1nWHZJcz08L2RhdGE+Cgk8L2FycmF5PgoKCTxrZXk+REVSLUVuY29kZWQtUHJvZmlsZTwva2V5PgoJPGRhdGE+TUlJTmV3WUpLb1pJaHZjTkFRY0NvSUlOYkRDQ0RXZ0NBUUV4RHpBTkJnbGdoa2dCWlFNRUFnRUZBRENDQXpZR0NTcUdTSWIzRFFFSEFhQ0NBeWNFZ2dNak1ZSURIekFNREFkV1pYSnphVzl1QWdFQk1BME1DRkJRVVVOb1pXTnJBUUgvTUJBTUNsUnBiV1ZVYjB4cGRtVUNBZ0ZzTUJNTURrbHpXR052WkdWTllXNWhaMlZrQVFFQU1CVU1CRTVoYldVTURWTmxiVXAxY205elFuVnBiR1F3SFF3SVZHVmhiVTVoYldVTUVVRk1Ra1ZTVkU4Z1MweEpSMFZTVFVGT01CME1DVUZ3Y0VsRVRtRnRaUXdRUVdKaGNtVnBWR1ZqYm05c2IyZHBZVEFkREF4RGNtVmhkR2x2YmtSaGRHVVhEVEkxTURnd01qQXlNemd6TTFvd0hnd09WR1ZoYlVsa1pXNTBhV1pwWlhJd0RBd0tWalF5UmpsWVZqWkdWakFmREE1RmVIQnBjbUYwYVc5dVJHRjBaUmNOTWpZd09EQXlNREl5TXpNeVdqQWdEQmRRY205bWFXeGxSR2x6ZEhKcFluVjBhVzl1Vkhsd1pRd0ZRVVJJVDBNd0lRd0lVR3hoZEdadmNtMHdGUXdEYVU5VERBUjRjazlUREFoMmFYTnBiMjVQVXpBckRCdEJjSEJzYVdOaGRHbHZia2xrWlc1MGFXWnBaWEpRY21WbWFYZ3dEQXdLVmpReVJqbFlWalpHVmpBc0RBUlZWVWxFRENRM09XSTBaVEZsTXkwMllqaGxMVFE0TlRJdE9XRTRaUzFqWkdGbE1qTXdaVGMyTURJd01Rd1NVSEp2ZG1semFXOXVaV1JFWlhacFkyVnpNQnNNR1RBd01EQTRNVEF4TFRBd01FTXpOVGxETVVVNE56QXdNVVV3T3d3VlJHVjJaV3h2Y0dWeVEyVnlkR2xtYVdOaGRHVnpNQ0lFSUEzUXJ4SUhnd0ZkMlFENHVqOFZBNjV3aGdaUlkxUGJjZTFKb05uYnYzanpNSUlCRWd3TVJXNTBhWFJzWlcxbGJuUnpjSUlCQUFJQkFiQ0IrakE0REJaaGNIQnNhV05oZEdsdmJpMXBaR1Z1ZEdsbWFXVnlEQjVXTkRKR09WaFdOa1pXTG1OdmJTNWhZbUZ5WldrdWMyVnRhblZ5YjNNd093dzJZMjl0TG1Gd2NHeGxMbVJsZG1Wc2IzQmxjaTVyWlhKdVpXd3VaWGgwWlc1a1pXUXRkbWx5ZEhWaGJDMWhaR1J5WlhOemFXNW5BUUgvTURFTUkyTnZiUzVoY0hCc1pTNWtaWFpsYkc5d1pYSXVkR1ZoYlMxcFpHVnVkR2xtYVdWeURBcFdOREpHT1ZoV05rWldNQk1NRG1kbGRDMTBZWE5yTFdGc2JHOTNBUUVBTURrTUZtdGxlV05vWVdsdUxXRmpZMlZ6Y3kxbmNtOTFjSE13SHd3TVZqUXlSamxZVmpaR1ZpNHFEQTlqYjIwdVlYQndiR1V1ZEc5clpXNmdnZ2c4TUlJQ1F6Q0NBY21nQXdJQkFnSUlMY1g4aU5MRlM1VXdDZ1lJS29aSXpqMEVBd013WnpFYk1Ca0dBMVVFQXd3U1FYQndiR1VnVW05dmRDQkRRU0F0SUVjek1TWXdKQVlEVlFRTERCMUJjSEJzWlNCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVUTUJFR0ExVUVDZ3dLUVhCd2JHVWdTVzVqTGpFTE1Ba0dBMVVFQmhNQ1ZWTXdIaGNOTVRRd05ETXdNVGd4T1RBMldoY05Nemt3TkRNd01UZ3hPVEEyV2pCbk1Sc3dHUVlEVlFRRERCSkJjSEJzWlNCU2IyOTBJRU5CSUMwZ1J6TXhKakFrQmdOVkJBc01IVUZ3Y0d4bElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekIyTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQTJJQUJKanBMejFBY3FUdGt5SnlnUk1jM1JDVjhjV2pUbkhjRkJiWkR1V21CU3AzWkh0ZlRqalR1eHhFdFgvMUg3WXlZbDNKNllSYlR6QlBFVm9BL1ZoWURLWDFEeXhOQjBjVGRkcVhsNWR2TVZ6dEs1MTdJRHZZdVZUWlhwbWtPbEVLTWFOQ01FQXdIUVlEVlIwT0JCWUVGTHV3M3FGWU00aWFwSXFaM3I2OTY2L2F5eVNyTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQW9HQ0NxR1NNNDlCQU1EQTJnQU1HVUNNUUNENmNIRUZsNGFYVFFZMmUzdjlHd09BRVpMdU4reVJoSEZELzNtZW95aHBtdk93Z1BVblBXVHhuUzRhdCtxSXhVQ01HMW1paERLMUEzVVQ4Mk5RejYwaW1PbE0yN2piZG9YdDJRZnlGTW0rWWhpZERrTEYxdkxVYWdNNkJnRDU2S3lLRENDQXVZd2dnSnRvQU1DQVFJQ0NETU43dmkvVEdndU1Bb0dDQ3FHU000OUJBTURNR2N4R3pBWkJnTlZCQU1NRWtGd2NHeGxJRkp2YjNRZ1EwRWdMU0JITXpFbU1DUUdBMVVFQ3d3ZFFYQndiR1VnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3hFekFSQmdOVkJBb01Da0Z3Y0d4bElFbHVZeTR4Q3pBSkJnTlZCQVlUQWxWVE1CNFhEVEUzTURJeU1qSXlNak15TWxvWERUTXlNREl4T0RBd01EQXdNRm93Y2pFbU1DUUdBMVVFQXd3ZFFYQndiR1VnVTNsemRHVnRJRWx1ZEdWbmNtRjBhVzl1SUVOQklEUXhKakFrQmdOVkJBc01IVUZ3Y0d4bElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQVpycEZadmZaOG4wYzQyanBJYlZzMVVObVJLeVpSb21mckpJSDdpOVZnUDNPSnE2eGxITHk3dk82UUJ0QUVUUkh4YUpxMmduQ2tsaXVYbUJtOVBmRnFqZ2Zjd2dmUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWZCZ05WSFNNRUdEQVdnQlM3c042aFdET0ltcVNLbWQ2K3ZldXYyc3NrcXpCR0JnZ3JCZ0VGQlFjQkFRUTZNRGd3TmdZSUt3WUJCUVVITUFHR0ttaDBkSEE2THk5dlkzTndMbUZ3Y0d4bExtTnZiUzl2WTNOd01ETXRZWEJ3YkdWeWIyOTBZMkZuTXpBM0JnTlZIUjhFTURBdU1DeWdLcUFvaGlab2RIUndPaTh2WTNKc0xtRndjR3hsTG1OdmJTOWhjSEJzWlhKdmIzUmpZV2N6TG1OeWJEQWRCZ05WSFE0RUZnUVVla2U2T0lvVkpFZ2lSczIranhva2V6UURLbWt3RGdZRFZSMFBBUUgvQkFRREFnRUdNQkFHQ2lxR1NJYjNZMlFHQWhFRUFnVUFNQW9HQ0NxR1NNNDlCQU1EQTJjQU1HUUNNQlVNcVk3R3I1WnBhNmVmM1Z6VUExbHNybExVWU1hTGR1QzN4YUx4Q1h6Z211TnJzZU44TWNRbmVxZU9pZjJyZHdJd1lUTWc4U24vK1ljeXJpbklaRDEyZTFHazBnSXZkcjVnSXBIeDFUcDEzTFRpeGlxVy9zWUozRXBQMVNUdy9NcXlNSUlEQnpDQ0FxMmdBd0lCQWdJSUY0Q29OR1prNnNzd0NnWUlLb1pJemowRUF3SXdjakVtTUNRR0ExVUVBd3dkUVhCd2JHVWdVM2x6ZEdWdElFbHVkR1ZuY21GMGFXOXVJRU5CSURReEpqQWtCZ05WQkFzTUhVRndjR3hsSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNUk13RVFZRFZRUUtEQXBCY0hCc1pTQkpibU11TVFzd0NRWURWUVFHRXdKVlV6QWVGdzB5TkRFeE1qQXdNekl3TkRWYUZ3MHlPREV5TVRReE9EQXdNekJhTUU0eEtqQW9CZ05WQkFNTUlWZFhSRklnVUhKdmRtbHphVzl1YVc1bklGQnliMlpwYkdVZ1UybG5ibWx1WnpFVE1CRUdBMVVFQ2d3S1FYQndiR1VnU1c1akxqRUxNQWtHQTFVRUJoTUNWVk13V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQxbEZzT3dkUlVQeG5lUm1BbFh6Nk9LYzlzVDVQVkhMZDl0bEpmSCtIN1l3R3lnaHVvb1U2MDArM3ZWcmtYMUpqTllMZk9UcW0zT2xkMlUrZ3pRNjk5bzRJQlR6Q0NBVXN3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlI2UjdvNGloVWtTQ0pHemI2UEdpUjdOQU1xYVRCQkJnZ3JCZ0VGQlFjQkFRUTFNRE13TVFZSUt3WUJCUVVITUFHR0pXaDBkSEE2THk5dlkzTndMbUZ3Y0d4bExtTnZiUzl2WTNOd01ETXRZWE5wWTJFME1ETXdnWllHQTFVZElBU0JqakNCaXpDQmlBWUpLb1pJaHZkalpBVUJNSHN3ZVFZSUt3WUJCUVVIQWdJd2JReHJWR2hwY3lCalpYSjBhV1pwWTJGMFpTQnBjeUIwYnlCaVpTQjFjMlZrSUdWNFkyeDFjMmwyWld4NUlHWnZjaUJtZFc1amRHbHZibk1nYVc1MFpYSnVZV3dnZEc4Z1FYQndiR1VnVUhKdlpIVmpkSE1nWVc1a0wyOXlJRUZ3Y0d4bElIQnliMk5sYzNObGN5NHdIUVlEVlIwT0JCWUVGT2xTemcyd3hvZ2FaVXE0bXhHUDhkd2VSeFI4TUE0R0ExVWREd0VCL3dRRUF3SUhnREFQQmdrcWhraUc5Mk5rREJNRUFnVUFNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUR2bXJ4ZG9GcG1iR1M1elRlVHFWTzBOOFhIYk9HRCtoY2EzZ3M5MXF0b1pnSWdlQ1BadzRnSFNUMzErNG1Qa0c1WTRGZWZZLzlZNGRhUFhKaGoxam8rUDUweGdnSFdNSUlCMGdJQkFUQitNSEl4SmpBa0JnTlZCQU1NSFVGd2NHeGxJRk41YzNSbGJTQkpiblJsWjNKaGRHbHZiaUJEUVNBME1TWXdKQVlEVlFRTERCMUJjSEJzWlNCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVUTUJFR0ExVUVDZ3dLUVhCd2JHVWdTVzVqTGpFTE1Ba0dBMVVFQmhNQ1ZWTUNDQmVBcURSbVpPckxNQTBHQ1dDR1NBRmxBd1FDQVFVQW9JSHBNQmdHQ1NxR1NJYjNEUUVKQXpFTEJna3Foa2lHOXcwQkJ3RXdIQVlKS29aSWh2Y05BUWtGTVE4WERUSTFNRGd3TWpBeU16Z3pNMW93S2dZSktvWklodmNOQVFrME1SMHdHekFOQmdsZ2hrZ0JaUU1FQWdFRkFLRUtCZ2dxaGtqT1BRUURBakF2QmdrcWhraUc5dzBCQ1FReElnUWdWQzBqZHE3ODdWL3pXbFRadWdIc3g4YkluT0EzangvTTVuZFA4aVM3VFhnd1VnWUpLb1pJaHZjTkFRa1BNVVV3UXpBS0JnZ3Foa2lHOXcwREJ6QU9CZ2dxaGtpRzl3MERBZ0lDQUlBd0RRWUlLb1pJaHZjTkF3SUNBVUF3QndZRkt3NERBZ2N3RFFZSUtvWklodmNOQXdJQ0FTZ3dDZ1lJS29aSXpqMEVBd0lFUmpCRUFpQUZpVWl5dGdwcHZxenJJTURJVmQ3Z1B1SVQzL2FyRktMek16ZVdoaENCL3dJZ0lZYk9ERmQ0bEljQzZJV1dZZU5PZEV6alY2eGhIY0R5ZFlia1hCNFg3VmM9PC9kYXRhPgoJCQkJCQkJCQkJCQkJCQoJCQk8a2V5PlBQUUNoZWNrPC9rZXk+Cgk8dHJ1ZS8+CgoJPGtleT5FbnRpdGxlbWVudHM8L2tleT4KCTxkaWN0PgoJCQkJCgkJCQk8a2V5PmFwcGxpY2F0aW9uLWlkZW50aWZpZXI8L2tleT4KCQk8c3RyaW5nPlY0MkY5WFY2RlYuY29tLmFiYXJlaS5zZW1qdXJvczwvc3RyaW5nPgoJCQkJCgkJCQk8a2V5PmtleWNoYWluLWFjY2Vzcy1ncm91cHM8L2tleT4KCQk8YXJyYXk+CgkJCQk8c3RyaW5nPlY0MkY5WFY2RlYuKjwvc3RyaW5nPgoJCQkJPHN0cmluZz5jb20uYXBwbGUudG9rZW48L3N0cmluZz4KCQk8L2FycmF5PgoJCQkJCgkJCQk8a2V5PmdldC10YXNrLWFsbG93PC9rZXk+CgkJPGZhbHNlLz4KCQkJCQoJCQkJPGtleT5jb20uYXBwbGUuZGV2ZWxvcGVyLnRlYW0taWRlbnRpZmllcjwva2V5PgoJCTxzdHJpbmc+VjQyRjlYVjZGVjwvc3RyaW5nPgoJCQkJCgkJCQk8a2V5PmNvbS5hcHBsZS5kZXZlbG9wZXIua2VybmVsLmV4dGVuZGVkLXZpcnR1YWwtYWRkcmVzc2luZzwva2V5PgoJCTx0cnVlLz4KCQkKCTwvZGljdD4KCTxrZXk+RXhwaXJhdGlvbkRhdGU8L2tleT4KCTxkYXRlPjIwMjYtMDgtMDJUMDI6MjM6MzJaPC9kYXRlPgoJPGtleT5OYW1lPC9rZXk+Cgk8c3RyaW5nPlNlbUp1cm9zQnVpbGQ8L3N0cmluZz4KCTxrZXk+UHJvdmlzaW9uZWREZXZpY2VzPC9rZXk+Cgk8YXJyYXk+CgkJPHN0cmluZz4wMDAwODEwMS0wMDBDMzU5QzFFODcwMDFFPC9zdHJpbmc+Cgk8L2FycmF5PgoJPGtleT5UZWFtSWRlbnRpZmllcjwva2V5PgoJPGFycmF5PgoJCTxzdHJpbmc+VjQy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
"
        XCODE_WORKSPACE: "Runner"
        XCODE_SCHEME: "Runner"
        BUNDLE_ID: "com.abarei.semjuros"

    scripts:
      - name: Instalar dependências
        script: flutter pub get

      - name: Print Generated.xcconfig
        script: |
          cat ios/Flutter/Generated.xcconfig || echo "Arquivo não encontrado"

      - name: Inicializar keychain
        script: keychain initialize

      - name: Restaurar certificado e perfil
        script: |
          # Restaurar certificado a partir do Base64
          echo $P12_BASE64 | base64 --decode > /tmp/semjuroscert.p12
          keychain add-certificates --certificate /tmp/semjuroscert.p12 --certificate-password $CERT_PASSWORD

          # Restaurar perfil de provisionamento
          echo $PROVISIONING_PROFILE_BASE64 | base64 --decode > /tmp/profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Instalar CocoaPods e gerar .xcworkspace
        script: |
          cd ios && pod install

      - name: Verificar se o workspace existe
        script: |
          ls "$CM_BUILD_DIR/ios/$XCODE_WORKSPACE.xcworkspace" || {
            echo "Workspace não encontrado!" && exit 1
          }

      - name: Gerar ExportOptions.plist
        script: |
          cat <<EOF > $CM_BUILD_DIR/ios/export_options.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
          "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>com.abarei.semjuros</key>
                <string>SemJurosBuild</string>
              </dict>
              <key>compileBitcode</key>
              <false/>
            </dict>
          </plist>
          EOF

      - name: Build IPA usando comando simplificado
        script: |
          set -eo pipefail
          xcodebuild \
            -workspace "ios/Runner.xcworkspace" \
            -scheme "Runner" \
            -archivePath "$CM_BUILD_DIR/ios/Runner.xcarchive" \
            archive \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            CODE_SIGN_STYLE=Manual \
            | tee xcodebuild.log

      - name: Mostrar log do XcodeBuild
        script: cat xcodebuild.log

artifacts:
  - build/ios/ipa/*.ipa
